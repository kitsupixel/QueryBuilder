<?php

require_once dirname(__FILE__).'/../funcao.php';

/**
 * Class QueryBuilder
 */
class QueryBuilder
{

    /**
     * Database table name
     *
     * @var string
     */
    protected $table;

    /**
     * Databas table alias
     *
     * @var null
     */
    private $alias = null;

    /**
     * Database primary key field
     *
     * @var string
     */
    protected $primaryKey = 'id';

    /**
     * Database has soft deletes
     *
     * @var bool
     */
    protected $softDelete = false;

    /**
     * Database soft delete field
     *
     * @var string
     */
    protected $softDeleteKey = 'deleted';

    /**
     * Converts insert and updated params to empty strings if null
     *
     * @var bool
     */
    protected $nullToString = false;

    /**
     * If the querys show/use the deleted rows
     *
     * @var bool
     */
    private $qWithDeleted = false;

    /**
     * Array of where conditions
     *
     * @var array
     */
    private $qWhere = [];

    /**
     * Array of parameters for the where conditions
     *
     * @var array
     */
    private $qParams = [];

    /**
     * Array of fields to put in the SELECT
     *
     * @var array
     */
    private $qSelect = [];

    /**
     * Array of GROUP BY fields
     *
     * @var array
     */
    private $qGroupBy = [];

    /**
     * Array of JOINS
     *
     * @var array
     */
    private $qJoin = [];

    /**
     * Array of ORDER BY fields and directions
     * @var array
     */
    private $qOrderby = [];

    /**
     * Query Limit
     *
     * @var int|null
     */
    private $qLimit = null;

    /**
     * Query Offset (paging)
     *
     * @var int|null
     */
    private $qOffset = null;

    /**
     * Defines if the next where conditions are within a group "(condition1 AND condition2 ...)"
     *
     * @var bool
     */
    private $groupStart = false;

    /**
     * Array of where conditions in a group
     *
     * @var array
     */
    private $groupWhere = [];

    /**
     * Position of the current group
     *
     * @var int
     */
    private $groupPosition = 0;

    /**
     * Connection to the Database
     *
     * @var \PDO|null
     */
    private $conn = null;

    /**
     * QueryBuilder constructor.
     *
     * @param int|null    $id if the class has a table gets the Object with this id
     * @param string|null $table Database table name
     * @param string      $primaryKey Database primary key field
     * @param bool        $softDelete If table has soft deletes
     * @param string      $softDeleteKey Database table soft delete key
     *
     * @return void|object
     */
    public function __construct($id = null, $table = null, $primaryKey = 'id', $softDelete = false, $softDeleteKey = 'deleted')
    {
        global $dbserver, $dbname, $dbuser, $dbpass, $conn;

        if ($this->table === null && $table === null) {
            $this->table = strtolower(__CLASS__);
        } elseif ($this->table === null) {
            $this->table = $table;
        }

        if ($this->primaryKey === null) {
            $this->primaryKey = $primaryKey;
        }

        if ($this->softDelete === null) {
            $this->softDelete = $softDelete;
        }

        if ($this->softDeleteKey === null) {
            $this->softDeleteKey = $softDeleteKey;
        }

        if ($conn) {
            $this->conn = $conn;
        } else {
            try {
                $this->conn = new PDO('mysql:host='.$dbserver.';dbname='.$dbname.';charset=latin1', $dbuser, $dbpass);
                $this->conn->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_ASSOC);
                $this->conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);


            } catch (PDOException $e) {
                $this->$this->debug('Connection failed: '.$e->getMessage());
            }
        }

        if ($id !== null) {
            return $this->get($id);
        }

        return $this;
    }


    /**
     * Defines the Database table name
     *
     * @param string $table Database table name
     * @param string|null $alias Alias for the table
     *
     * @return $this
     */
    public function from($table, $alias = null)
    {
        $this->table = $table;
        $this->alias = $alias;

        return $this;
    }

    /**
     * Adds ORDER BY condition
     *
     * @param string $field Database field name
     * @param string $direction Direction of the field ['ASC' or 'DESC']
     *
     * @return $this
     */
    public function orderBy($field, $direction = 'ASC')
    {
        $direction = strtoupper($direction);
        if ( ! in_array($direction, ['ASC', 'DESC'])) {
            $direction = null;
        }

        $this->qOrderby[] = $field.($direction ? " ".$direction : "");

        return $this;
    }

    /**
     * Defines the LIMIT of the query
     *
     * @param int $limit Limit of the query
     *
     * @return $this
     */
    public function limit($limit)
    {
        if ((int)$limit) {
            $this->qLimit = $limit;
        }

        return $this;
    }

    /**
     * Defines the OFFSET of the query (used for paging)
     *
     * @param int $offset Offset of the query
     *
     * @return $this
     */
    public function offset($offset)
    {
        if ((int)$offset) {
            $this->qOffset = $offset;
        }

        return $this;
    }

    /**
     * Defines the offset based on the limit and the page
     *
     * @param int $page Page to be shown
     *
     * @return $this
     */
    public function page($page)
    {
        if ($this->qLimit && (int)$page > 1) {
            $this->qOffset = $this->qLimit * ($page - 1);
        } else {
            $this->qOffset = 0;
        }

        return $this;
    }

    /**
     * Adds a where condition to the query
     *
     * @param string $field Can be a field or a RAW QUERY if the other parameters are empty
     * @param mixed $value Value to be compared
     * @param string|null $operator Operator of the condition
     * @param bool $or If the condition is a AND or a OR
     *
     * @return $this
     */
    public function where($field, $value = null, $operator = null, $or = false)
    {
        if ($value !== null) {
            if ($operator === null) {
                $operator = '=';
            }

            if ( ! is_array($value)) {
                $this->qParams[] = $value;
                $value = "?";
            } else {
                // Se for um array sÃ³ funciona se o operador for um "IN" ou um "NOT IN"
                if ($operator === null || ! in_array(strtoupper($operator), ['IN', 'NOT IN'])) {
                    $operator = "IN";
                }

                $temp = "";
                foreach ($value as $i => $val) {
                    if ($i != 0) {
                        $temp .= ", ";
                    }

                    $temp .= "?";
                    $this->qParams[] = $val;
                }

                $value = "($temp)";
            }
        }

        if ($operator !== null) {
            $operator = strtoupper($operator);
        }

        $condition = [($or ? " OR" : " AND"), $field, $operator, $value];

        if ($this->groupStart) {
            $this->groupWhere[$this->groupPosition][] = $condition;
            $condition = $this->groupPosition;
        }

        if (!$this->groupStart || !in_array($condition, $this->qWhere)) {
            $this->qWhere[] = $condition;
        }

        return $this;
    }

    /**
     * The same as the where function but forces a OR condition
     * @param string $field Can be a field or a RAW QUERY if the other parameters are empty
     * @param mixed $value Value to be compared
     * @param string|null $operator Operator of the condition
     *
     * @return $this
     */
    public function orWhere($field, $value = null, $operator = null)
    {
        return $this->where($field, $value, $operator, true);
    }

    /**
     * Defines the select fields of the query, you can add a single field or and array of fields
     *
     * @return $this
     */
    public function select()
    {
        $fields = func_get_args();
        foreach ($fields as $field) {
            if (is_array($field)) {
                foreach ($field as $f) {
                    $this->qSelect = array_merge($this->qSelect, [$f]);
                }
            } else {
                $this->qSelect = array_merge($this->qSelect, [$field]);
            }
        }

        if ($fields == '*') {
            $this->qSelect = ['*'];
        }

        return $this;
    }

    /**
     * Creates the query to use on the fetch or all function
     *
     * @param bool $seeParams Returns the query with the parameters
     * @param bool $reset Calls the reset function in the end
     *
     * @return string
     */
    public function toSQL($seeParams = false, $reset = false)
    {
        $sql = "SELECT ";

        if ( ! empty($this->qSelect)) {
            $sql .= implode(', ', $this->qSelect);
        } else {
            $sql .= '*';
        }

        $sql .= " FROM {$this->table}".($this->alias ? " ".$this->alias : "");

        if ( ! empty($this->qJoin)) {
            $sql .= implode("", $this->qJoin);
        }

        $sql .= $this->compileWhere();

        if ( ! empty($this->qGroupBy)) {
            $sql .= " GROUP BY ".implode(", ", $this->qGroupBy);
        }

        if ( ! empty($this->qOrderby)) {
            $sql .= " ORDER BY ".implode(", ", $this->qOrderby);
        }

        if ( ! empty($this->qLimit)) {
            $sql .= " LIMIT ".$this->qLimit;
        }

        if ($this->qOffset !== null) {
            $sql .= " OFFSET ".$this->qOffset;
        }

        if ($seeParams) {
            $sql = $this->replaceParams($sql);
        }

        if ($reset) {
            $this->reset();
        }

        return $sql;
    }

    /**
     * Returns the count withou the limit or offset
     *
     * @param bool $addDistinct Adds a DISTINCT to the query
     *
     * @return int
     */
    public function count($addDistinct = false)
    {
        $clone = clone $this;
        $clone->qSelect = [];
        $clone->qLimit = null;
        $clone->qOffset = null;

        return (int)$clone->select("COUNT(".($addDistinct ? "DISTINCT " : "").($this->alias ?: $this->table).".{$this->primaryKey}) count")->fetch('count');
    }

    /**
     * Adds a join condition
     * @param string $table Database name
     * @param string $condition Condition to be connectect or "ON" for short
     * @param string $type Type of JOIN
     *
     * @return $this
     */
    public function join($table, $condition, $type = 'INNER')
    {
        $type = strtoupper($type);
        if ( ! in_array($type, ['LEFT', 'RIGTH', 'INNER', 'FULL', ''])) {
            $type = 'INNER';
        }

        $this->qJoin[] = " ".($type ? $type." " : "")."JOIN $table ON $condition";

        return $this;
    }

    /**
     * Adds a GROUP BY field, you can add a single field or and array of fields
     *
     * @return $this
     */
    public function groupBy()
    {
        $fields = func_get_args();
        foreach ($fields as $field) {
            if (is_array($field)) {
                foreach ($field as $f) {
                    $this->qGroupBy = array_merge($this->qGroupBy, [$f]);
                }
            } else {
                $this->qGroupBy = array_merge($this->qGroupBy, [$field]);
            }
        }

        return $this;
    }

    /**
     * @param      $id
     * @param null $field
     * @param bool $asObject
     *
     * @return $this|mixed|null
     */
    public function get($id, $field = null, $asObject = true)
    {
        if ($field !== null) {
            $asObject = false;
        }
        $obj = $this->where($this->primaryKey, $id)->fetch($field, $asObject);
        if ($obj && $asObject === true) {
            foreach ($obj as $key => $value) {
                $this->{$key} = $value;
            }
        } else {
            return $obj;
        }

        return $this;
    }

    /**
     * @param string|null $field
     * @param bool        $asObject
     *
     * @return mixed|null
     */
    public function fetch($field = null, $asObject = true)
    {
        if ($field !== null) {
            $asObject = false;
        }

        try {
            $query = $this->conn->prepare($this->toSQL());
            $query->execute($this->qParams);

            if ( ! $asObject) {
                $result = $query->fetch(PDO::FETCH_ASSOC);
            } else {
                $result = $query->fetchObject(get_class($this));
            }

            $this->reset();

            if ($result === false) {
                return null;
            }

            return $field ? $result[$field] : $result;
        } catch (PDOException $e) {
            $this->debug($e->getMessage()."\n".$this->toSQL(true));

            return null;
        }
    }

    /**
     * @param bool $asObject
     *
     * @return array|null
     */
    public function all($asObject = true)
    {
        try {
            $query = $this->conn->prepare($this->toSQL());
            $query->execute($this->qParams);

            if ( ! $asObject) {
                $result = $query->fetchAll(PDO::FETCH_ASSOC);
            } else {
                $result = $query->fetchAll(PDO::FETCH_CLASS);
            }

            $this->reset();

            if ($result === false) {
                return null;
            }

            return $result;
        } catch (PDOException $e) {
            $this->debug($e->getMessage()."\n".$this->toSQL(true));

            return null;
        }
    }

    /**
     * @param      $id
     * @param bool $seeParams
     * @param bool $reset
     *
     * @return string|string[]|null
     */
    public function deleteSQL($id, $seeParams = false, $reset = false)
    {
        if ($this->softDelete === false) {
            $sql = "DELETE FROM {$this->table}".($this->alias ? " ".$this->alias : "");

            if ($id !== null) {
                $this->qWhere = [[" AND", $this->primaryKey, "=", "?"]];
                $this->qParams = [$id];
            }

            $sql .= $this->compileWhere(true);

            if ($seeParams) {
                $sql = $this->replaceParams($sql);
            }

            return $sql;
        } else {
            $sql = "UPDATE {$this->table} SET {$this->softDeleteKey} = NOW()";

            if ($id !== null) {
                $this->qWhere = [[" AND", $this->primaryKey, "=", "?"]];
                $this->qParams = [$id];
            }

            $sql .= $this->compileWhere(true);

            if ($seeParams) {
                $sql = $this->replaceParams($sql);
            }

            if ($reset) {
                $this->reset();
            }

            return $sql;
        }
    }

    /**
     * @param mixed|null $id
     *
     * @return int|null
     */
    public function delete($id = null)
    {
        try {
            if ($id === null) {
                if ($params = $this->toArray()) {
                    if ( ! empty($params[$this->primaryKey])) {
                        $id = $params[$this->primaryKey];
                    }
                }
            }

            $query = $this->conn->prepare($this->deleteSQL($id));
            $query->execute($this->qParams);

            $this->reset();

            return (int)$query->rowCount();
        } catch (PDOException $e) {
            $this->debug($e->getMessage()."\n".$this->deleteSQL($id, true));

            return null;
        }
    }

    /**
     * @param      $params
     * @param null $id
     * @param bool $seeParams
     * @param bool $reset
     *
     * @return string|string[]|null
     */
    public function updateSQL($params, $id = null, $seeParams = false, $reset = false)
    {
        $newParams = [];

        $sql = "UPDATE {$this->table} SET ";

        $first = true;
        foreach ($params as $key => $value) {
            if ($first === false) {
                $sql .= ", ";
            }

            if ($value !== null || ($value === null && $this->nullToString === true)) {
                $sql .= "$key = ?";
                $newParams[] = "$value";
            } else {
                $sql .= "$key = NULL";
            }

            $first = false;
        }

        if ($id !== null) {
            $this->qWhere = [[" AND", $this->primaryKey, "=", "?"]];
            $this->qParams = [$id];
        }

        $sql .= $this->compileWhere(true);

        $this->qParams = array_merge($newParams, $this->qParams);

        if ($seeParams) {
            $sql = $this->replaceParams($sql);
        }

        if ($reset) {
            $this->reset();
        }

        return $sql;
    }

    /**
     * @param      $params
     * @param null $id
     * @param bool $runTriggers
     *
     * @return int|null
     */
    public function update($params, $id = null, $runTriggers = true)
    {
        try {
            if ($runTriggers) {
                $this->beforeUpdate($params, $id);
            }

            $query = $this->conn->prepare($this->updateSQL($params, $id));
            $query->execute($this->qParams);
            $rowCount = (int)$query->rowCount();

            $this->reset();

            if ($runTriggers) {
                $this->afterUpdate($params, $id);
            }

            return $rowCount;
        } catch (PDOException $e) {
            $this->debug($e->getMessage()."\n".$this->updateSQL($params, $id, true));

            return null;
        }
    }

    /**
     * @param      $params
     * @param bool $seeParams
     * @param bool $reset
     *
     * @return string|string[]|null
     */
    public function insertSQL($params, $seeParams = false, $reset = false)
    {
        $newParams = [];

        $keys = implode(", ", array_keys($params));
        $values = [];

        foreach($params as $value) {
            if ($value !== null || ($value === null && $this->nullToString === true)) {
                $values[] = "?";
                $newParams[] = "$value";
            } else {
                $values[] = "NULL";
            }
        }

        $this->qParams = $newParams;

        $sql = "INSERT INTO {$this->table} ($keys) VALUE (".implode(", ", $values).")";

        if ($seeParams) {
            $sql = $this->replaceParams($sql);
        }

        if ($reset) {
            $this->reset();
        }

        return $sql;
    }

    /**
     * @param      $params
     * @param bool $runTriggers
     *
     * @return int|null
     */
    public function insert($params, $runTriggers = true)
    {
        try {
            if ($runTriggers) {
                $this->beforeInsert($params);
            }

            $query = $this->conn->prepare($this->insertSQL($params));
            $query->execute($this->qParams);
            $insertedId = $this->conn->lastInsertId();

            $this->reset();

            if ($runTriggers) {
                $this->afterInsert($params, $insertedId);
            }

            if ($insertedId !== false) {
                return (int)$insertedId;
            }
        } catch (PDOException $e) {
            $this->debug($e->getMessage()."\n".$this->insertSQL($params, true));

            return null;
        }

        return null;
    }

    /**
     * @return $this
     */
    public function whereGroupStart()
    {
        $this->groupStart = true;

        return $this;
    }

    /**
     * @return $this
     */
    public function whereGroupEnd()
    {
        $this->groupStart = false;
        $this->groupPosition++;

        return $this;
    }

    /**
     * @param bool $softDeleteOveride
     *
     * @return string
     */
    private function compileWhere($softDeleteOveride = false)
    {
        $sql = "";
        if ( ! empty($this->qWhere)) {
            $sql = " WHERE ";
            foreach ($this->qWhere as $i => $where) {
                if (is_array($where)) {
                    if ( ! $i) {
                        unset($where[0]);
                        array_filter($where);
                    }

                    $sql .= implode(" ", array_filter($where));
                } else {
                    // Groups
                    if ( ! empty($this->groupWhere[$where])) {
                        if ($i) {
                            $sql .= $this->groupWhere[$where][0][0]." ";
                        }
                        $sql .= "(";
                        foreach ($this->groupWhere[$where] as $j => $groupWhere) {
                            if ( ! $j) {
                                unset($groupWhere[0]);
                                array_filter($groupWhere);
                            }

                            $sql .= implode(" ", array_filter($groupWhere));
                        }
                        $sql .= ")";
                    }
                }

            }

            if ($this->softDelete && ! $this->qWithDeleted && ! $softDeleteOveride) {
                $sql .= " AND ({$this->softDeleteKey} IS NULL OR {$this->softDeleteKey} = '')";
            }
        } else {
            if ($this->softDelete && ! $this->qWithDeleted && ! $softDeleteOveride) {
                $sql .= " WHERE ({$this->softDeleteKey} IS NULL OR {$this->softDeleteKey} = '')";
            }
        }

        return $sql;
    }

    /**
     *
     */
    private function reset()
    {
        $this->qWhere = $this->qParams = $this->qSelect = $this->qGroupBy = $this->qJoin = $this->qOrderby = [];
        $this->qLimit = $this->qOffset = null;
    }

    /**
     * @param $params
     */
    protected function beforeInsert(&$params)
    {
    }

    /**
     * @param $params
     * @param $insertedId
     */
    protected function afterInsert($params, $insertedId)
    {
    }

    /**
     * @param $params
     * @param $id
     */
    protected function beforeUpdate(&$params, $id)
    {
    }

    /**
     * @param $params
     * @param $id
     */
    protected function afterUpdate($params, $id)
    {
    }

    /**
     * @param $sql
     *
     * @return string|string[]|null
     */
    private function replaceParams($sql)
    {
        foreach ($this->qParams as $param) {
            $param = "'$param'";

            $sql = str_replace_first("?", $param, $sql);
        }

        return $sql;
    }

    /**
     * @return mixed
     */
    public function toArray()
    {
        return objectToArray($this);
    }

    /**
     * @param bool $runTriggers
     *
     * @return mixed|null
     */
    public function save($runTriggers = true)
    {
        $params = $this->toArray();
        if ( ! empty($params)) {
            if (empty($params[$this->primaryKey])) {
                $id = $this->insert($params, $runTriggers);
            } else {
                $id = $params[$this->primaryKey];
                unset($params[$this->primaryKey]);
                $this->update($params, $id, $runTriggers);
            }

            if ($obj = $this->get($id, false)) {
                foreach ($obj as $key => $value) {
                    $this->{$key} = $value;
                }
            }

            return $this;
        }

        return null;
    }

    /**
     * @param $val
     */
    private function debug($val)
    {
        $val .= "
        <fieldset><legend>".__CLASS__."</legend>Table: $this->table $this->alias\nPrimaryKey: $this->primaryKey\nSoftDelete: ".($this->softDelete ? 'Yes ('.$this->softDeleteKey.')' : 'No')."\nLimit: $this->qLimit\nOffset: $this->qOffset</fieldset>
        <fieldset><legend>qSelect</legend><pre>".print_r($this->qSelect, true)."</pre></fieldset>
        <fieldset><legend>qJoin</legend><pre>".print_r($this->qJoin, true)."</pre></fieldset>
        <fieldset><legend>qWhere</legend><pre>".print_r($this->qWhere, true)."</pre></fieldset>
        <fieldset><legend>groupWhere</legend><pre>".print_r($this->groupWhere, true)."</pre></fieldset>
        <fieldset><legend>qParams</legend><pre>".print_r($this->qParams, true)."</pre></fieldset>
        <fieldset><legend>qGroupBy</legend><pre>".print_r($this->qGroupBy, true)."</pre></fieldset>
        <fieldset><legend>qOrderBy</legend><pre>".print_r($this->qOrderby, true)."</pre></fieldset>
        ";

        debug($val);
    }

    /**
     * Returns an array of the inputed field
     * @param string $field The database field name
     * @param string|null $key Changes the array to a relation array $key => $field
     *
     * @return array|null
     */
    public function dropdown($field, $key = null)
    {
        $return = null;

        if ($rows = $this->all()) {
            foreach ($rows as $row) {
                if ($key === null) {
                    $return[] = $row->{$field};
                } else {
                    $return[$row->{$key}] = $row->{$field};
                }
            }
        }

        return $return;
    }

    /**
     *
     * Copies the selected row and changes the fields according to the replaceFields array
     *
     * @param int $id Id of the row to copy
     * @param array $replaceFields Array of fields to change in the new row
     *
     * @return int|null
     */
    public function copy($id, $replaceFields = [])
    {
        $clone = clone $this;
        if ($clone->get($id)) {
            $params = $clone->toArray();

            unset($params[$this->primaryKey]);

            if (!empty($replaceFields)) {
                foreach ($replaceFields as $key => $value) {
                    $params[$key] = $value;
                }
            }

            return $this->insert($params);
        }

        return null;
    }
}
